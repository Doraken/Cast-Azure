###############################################################################
# Security.lib                                          Version : 1.0         #
#                                                                             #
# Creation Date : 05/02/2019                                                  #
# Team          : Arnaud Crampet                                              #
# Support mail  : arnaud@crampet.net                                          #
# Author        : Arnaud Crampet                                              #
#                                                                             #
# Subject : This library provide base element to apply generic hardening model#
#           this lib is based on C.A.S.T. framwork created by ARNAUD CRAMPET  #
###############################################################################
####
# INFO 
#      this lib is for RED-HAD based system
Report_result="/tmp/report"

function 1.1.6_Set_Sticky_Bit_on_All_World_Writable_Directories ()
{
	#|# Description :  1.1.6 Set Sticky Bit on All World-Writable Directories
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	testmnt="/tmp /var /var/log /home"
	_result="0" 
	for mntpoint in ${testmnt} 
		do 
			cat /etc/fstab | grep "${mntpoint} " 
			if [ "${?}" != "0" ]
				then
					_result="1"
			fi
	done 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					# warning this cant be ussed to apply in this version
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.1.1_Separate_Filesystems ()
{
	#|# Description :  1.1.1 Separate Filesystems
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0"
	_count="$(find / -type d -perm -0002  ! -perm -1000 2>/dev/null | wc -l )"
	if [ ${_count} -ge "1" ]
		then
			_result="1"
		else
			_result="0"
	fi
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					for elements in $( find / -type d -perm -0002  ! -perm -1000 2>/dev/null  ) 
						do 
							chmod a+t ${elements}
					done 
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.1.2_tmp_mount_options ()
{
	#|# Description :  1.1.2 /tmp mount options
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0"
	grep /tmp /etc/fstab > /dev/null 2&>1 
	if [ ${?} != "0" ] 
		then 
			_result="1"
			_mode=""
		else 
			grep /tmp /etc/fstab |  egrep 'nodev|nosuid|noexec' > /dev/null  2&>1 
			if [ ${?} != "0" ] 
				then 
				_result="1"
			fi 
	fi
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					File_Backup "/etc/fstab"
					_OriginalLine="$(cat /etc/fstab | grep "/tmp " |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					_oldVal="$(cat /etc/fstab | grep "/tmp " | awk '{ print $4 }' )"
					_NewLine="$(cat /etc/fstab | grep "/tmp " | sed -e "s/${_oldVal}/nodev,nosuid,noexec/g" |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					sed -i "s/${_OriginalLine}/${_NewLine}/g" /etc/fstab 
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.1.3_home_mount_options ()
{
	#|# Description :  1.1.3 home mount options
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0"
	grep /home /etc/fstab > /dev/null 2>1
	if [ ${?} != "0" ] 
		then 
			_result="1"
			_mode=""
		else 
			grep /home /etc/fstab |  egrep 'nodev' > /dev/null 2>&1
			if [ ${?} != "0" ] 
				then 
				_result="1"
			fi 
	fi
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					File_Backup "/etc/fstab"
					_OriginalLine="$(cat /etc/fstab | grep "/home " |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					_oldVal="$(cat /etc/fstab | grep "/home " | awk '{ print $4 }' )"
					_NewLine="$(cat /etc/fstab | grep "/home " | sed -e "s/${_oldVal}/default,nodev/g" |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					sed -i "s/${_OriginalLine}/${_NewLine}/g" /etc/fstab 
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.1.4_dev_shm_mount_options
{	
	#|# Description :  1.1.4 /dev/shm mount options
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] "  
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0"
	grep "/dev/shm" /etc/fstab > /dev/null 2&>1
	if [ ${?} != "0" ] 
		then 
			_result="1"
			echo "tmpfs /dev/shm tmpfs rw,seclabel,noexec,nosuid,nodev 0 0"
		else 
			grep "/dev/shm" /etc/fstab |  egrep 'rw,seclabel,noexec,nosuid,nodev' > /dev/null 2>&1
			if [ ${?} != "0" ] 
				then 
				_result="1"
			fi 
	fi
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					File_Backup "/etc/fstab"
					_OriginalLine="$(cat /etc/fstab | grep "/dev/shm " |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					_oldVal="$(cat /etc/fstab | grep "/dev/shm " | awk '{ print $4 }' )"
					_NewLine="$(cat /etc/fstab | grep "/dev/shm " | sed -e "s/${_oldVal}/rw,seclabel,noexec,nosuid,nodev/g" |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					sed -i "s/${_OriginalLine}/${_NewLine}/g" /etc/fstab 
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.1.5_Bind_Mount_the_var_tmp_directory_to_tmp ()
{
	#|# Description :  1.1.5 Bind Mount the /var/tmp directory to /tmp
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0"
	grep /var/tmp /etc/fstab > /dev/null 2>1
	if [ ${?} != "0" ] 
		then 
			_result="1"
			echo "/tmp /var/tmp none bind 0 0" >> /etc/fstab
		else 
			grep /var/tmp /etc/fstab | grep "/tmp" | grep  "/var/tmp" | grep "none"  | grep "bind"
			if [ ${?} != "0" ] 
				then 
					_result="1"
			fi 
	fi
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					File_Backup "/etc/fstab"
					_OriginalLine="$(cat /etc/fstab | grep "/var/tmp " |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					_NewLine="$(echo "/tmp /var/tmp none bind 0 0" |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					sed -i "s/${_OriginalLine}/${_NewLine}/g" /etc/fstab 
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.2_Use_the_Latest_OS_Release  
{
	#|# Description :  1.2	Use the Latest OS Release 
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 

	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	
	## TEST 
	_result="1" && cat /etc/redhat-release | grep 7.6 > /dev/null 2>&1 && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.3.2_Verify_that_gpgcheck_is_Globally_Activated 
{
	#|# Description :  1.3.2_Verify_that_gpgcheck_is_Globally_Activated  
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 

	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	
	## TEST 
	_result="1" && cat /etc/yum.conf | grep "gpgcheck=1" > /dev/null 2>&1 && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					_OriginalLine="$(cat /etc/yum.conf | grep "gpgcheck=" )"
					sed -i "s/${_OriginalLine}/gpgcheck=1/g" /etc/yum.conf
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.3.3_Disable_the_rhnsd_Daemon 
{
	#|# Description :  this functionc will remove  rhnsd Daemon
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 

	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	chkconfig  2>>  /dev/null |grep rhnsd | grep on  >> /dev/null
	## end test
	if [ ${?} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then
					## APPLY
					systemctl stop rhnsd > /dev/null 
					chkconfig rhnsd off  > /dev/null
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.4.1_Install_AIDE  ()
{
	#|# Description :  1.4.1 Install AIDE 
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"

	## TEST 
	_result="1" && yum list installed aide  -q > /dev/null 2>&1 && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_Install_Package "aide"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.4.2_Implement_Periodic_Execution_of_File_Integrity ()
{
	#|# Description :  1.4.2 Implement Periodic Execution of File Integrity
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"

	crontab -u root -l | grep aide | grep check >> /dev/null 
	if [ ${?} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					{ crontab -u root -l; echo "0 5 * * * /usr/sbin/aide --check"; } | crontab -u root -
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.5.1_Set_the_SELinux_State 
{
	#|# Description :  1.5.1 Set the SELinux State  
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 

	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	
	## TEST 
	_result="1" && grep "SELINUX=enforcing" /etc/selinux/config  > /dev/null 2>&1 && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					_OriginalLine="$(grep "SELINUX="  /etc/selinux/config )"
					sed -i "s/${_OriginalLine}/SELINUX=enforcing/g" /etc/yum.conf
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.5.2_Set_the_SELinux_Policy
{
	#|# Description :  1.5.2 Set the SELinux Policy 
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 

	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	
	## TEST 
	_result="1" && grep "SELINUXTYPE=targeted" /etc/selinux/config  > /dev/null 2>&1 && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					_OriginalLine="$(grep "SELINUXTYPE="  /etc/selinux/config )"
					sed -i "s/${_OriginalLine}/SELINUXTYPE=targeted/g" /etc/yum.conf
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.5.3_Remove_SETroubleshoot ()
{
	#|# Description :  1.4.2 Implement Periodic Execution of File Integrity
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"

	## TEST 
	_result="0" && yum list installed SETroubleshoot -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "SETroubleshoot"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.5.4_Remove_MCS_Translation_Service ()
{
	#|# Description :  1.4.2 Implement Periodic Execution of File Integrity
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"

	## TEST 
	_result="0" && yum list installed mcstrans -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "mcstrans"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 1.6.1_Set_User_Group_Owner_and_permissions_on_etc_grub_conf ()
{
	#|# Description :  1.6.1 Set User/Group Owner and permissions on /etc/grub2.conf
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_GRBcnf_OWN="$( ls -al /etc/grub2.cfg | awk '{ print $3 "_" $4 }' )"
	_GRBcnf_OWN="${_GRBcnf_OWN} $( ls -al /etc/grub.d | awk '{ print $3 "_" $4 }' )"
	for grub_sun in $( find /etc/grub.d/ -type f ) 
		do 	
			_GRBcnf_OWN="${_GRBcnf_OWN} $( ls -al ${grub_sun} | awk '{ print $3 "_" $4 }' )"
	done 
	for _Grubown in ${_GRBcnf_OWN} 
		do 
			if [ ${_Grubown} != "root_root" ] 
				then 
					_result="1"
			fi 
	done 
	
	
			
	if [ ${?} = "0" ]
		then 
			_result="0"
		else 
			_result="1"
	fi 
		## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					chown root:root /etc/grub2.conf
					chmod og-rwx /etc/grub2.conf
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 2.1.1_Remove_telnet_server_and_clients ()
{
	#|# Description :  1.4.2 Implement Periodic Execution of File Integrity
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"

	## TEST 
	_result="0" && yum list installed telnet-server -q > /dev/null 2>&1 && _result="1"
	yum list installed telnet -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "telnet-server"
					yum_UnInstall_Package "telnet"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 2.1.2_Remove_rsh ()
{
	#|# Description :  Rule : 2.1.2     Remove rsh
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"

	## TEST 
	_result="0" && yum list installed rsh-server -q > /dev/null 2>&1 && _result="1"
	yum list installed rsh -q > /dev/null 2>&1 && _result="1"

	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					MSG_DISPLAY "Info" ""
					yum_UnInstall_Package "rsh-server"
					yum_UnInstall_Package "rsh"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 2.1.3_Remove_NIS ()
{
	#|# Description :  Rule : 2.1.2     Remove rsh
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST 
	_result="0" && yum list installed ypserv -q > /dev/null 2>&1 && _result="1"
	yum list installed ypbind -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "ypserv"
					yum_UnInstall_Package "ypbind"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 2.1.4_Remove_tftp ()
{
	#|# Description :  2.1.4 Remove tftp
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST 
	_result="0" && yum list installed tftp-server -q > /dev/null 2>&1 && _result="1"
	 yum list installed tftp -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "tftp-server"
					yum_UnInstall_Package "tftp"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 2.1.5_Remove_talk ()
{
	#|# Description :  2.1.5 Remove talk
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	

	## TEST 
	_result="0" && yum list installed talk-server -q > /dev/null 2>&1 && _result="1"
	yum list installed talk -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "talk-server"
					yum_UnInstall_Package "talk"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 2.1.6_Remove_xinetd ()
{
	#|# Description :  2.1.6 Remove xinetd
	#|#
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between evaluate/correct 
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|#
	#|# Base usage  :   " "
	#|#
	#|# Send Back   :  
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST 
	_result="0" && yum list installed xinetd -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "xinetd"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
		
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.1_Set_Daemon_umask ()
{
	#|# Description :  3.1 Set Daemon umask
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_umask_state="$(cat /etc/init.d/functions | grep ^umask | awk '{print $2}')"
	if [ ${_umask_state} = "027" ]
		then 
			_result="0"
		else 
			_result="1"
	fi 
		## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					File_Backup "/etc/init.d/functions"
					sed -i "s/umask\ ${_umask_state}/umask\ 027/g" /etc/init.d/functions
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}


function 3.1.1_Remove_X_Windows ()
{
	#|# Description :  3.1 Set Daemon umask
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_result="1" && systemctl get-default | grep multi-user.target > /dev/null 2>&1 && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					systemctl set-default multi-user.target
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.2_Disable_Avahi_Server ()
{
	#|# Description :  3.2 Disable Avahi Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST 
	_result="0" && yum list installed avahi -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "avahi"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.2.1_Disable_Print_Server_CUPS ()
{
	#|# Description :  3.2.1 Disable Print Server -CUPS
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST 
	_result="0" && yum list installed cups -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "cups"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.3_Remove_DHCP_Server ()
{
	#|# Description :  3.3 Remove DHCP Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST 
	_result="0" && yum list dhcp -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "dhcp"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.4_Remove_LDAP ()
{
	#|# Description :  3.4       Remove LDAP
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0" && yum list installed openldap-servers -q > /dev/null 2>&1 && _result="1"
	yum list installed openldap-clients -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "openldap-servers"
					yum_UnInstall_Package "openldap-clients"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.5_Disable_NFS_and_RPC ()
{
	#|# Description :  3.5 Disable NFS and RPC
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0" && yum list installed cifs-utils -q > /dev/null 2>&1 && _result="1"
	yum list installed gssproxy -q > /dev/null 2>&1 && _result="1"
	yum list installed nfs-utils -q > /dev/null 2>&1 && _result="1"
	yum list installed nfs4-acl-tools -q > /dev/null 2>&1 && _result="1"
	yum list installed target-cli -q > /dev/null 2>&1 && _result="1"
	yum list installed targetd -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "cifs-utils"
					yum_UnInstall_Package "gssproxy"
					yum_UnInstall_Package "nfs-utils"
					yum_UnInstall_Package "nfs4-acl-tools"
					yum_UnInstall_Package "target-cli"
					yum_UnInstall_Package "targetd"
					## END apply
					${_callback} "report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.6_Remove_DNS_Server ()
{
	#|# Description :  3.6 Remove DNS Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0" && yum list installed bind -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "bind"
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.7_Remove_FTP_Server ()
{
	#|# Description :  3.7 Remove FTP Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0" && yum list installed vsftpd -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "vsftpd"
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.6_Remove_HTTP_Server ()
{
	#|# Description :  3.6 Remove HTTP Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0" && yum list installed httpd -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "httpd"
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.8_Remove_Dovecot_IMAP_and_POP3_services ()
{
	#|# Description :  3.8 Remove Dovecot (IMAP and POP3 services)
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0" && yum list installed dovecot -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "dovecot"
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.9_Remove_Samba ()
{
	#|# Description :  3.9 Remove Samba
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0" && yum list installed samba -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "samba"
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.10_Remove_HTTP_Proxy_Server ()
{
	#|# Description :  3.10 Remove HTTP Proxy Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST 
	_result="0" && yum list installed squid -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "squid"
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.11_Remove_SNMP_Server ()
{
	#|# Description :  3.11_Remove_SNMP_Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_result="0" && yum list installed net-snmp -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "net-snmp"
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.12_Configure_Network_Time_Protocol_NTP ()
{
	#|# Description :  3.11_Remove_SNMP_Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_state_ntp=$(systemctl | grep ntpd | awk '{ print $2 "_" $3 "_" $4  }') 
	if [ "${_state_ntp}" = "loaded_active_running" ]
		then 
			_result="0"
		else 
			_result="1"
	fi	
	yum list installed chrony -q > /dev/null 2>&1 && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_UnInstall_Package "chrony"
					yum_Install_Package   "ntp"
					echo "#For more information about this file, see the man pages  # ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5). "                 > /etc/ntp.conf 
					echo "driftfile /var/lib/ntp/drift "                                                                                                                            >> /etc/ntp.conf 
					echo "# Permit time synchronization with our time source, but do not  # permit the source to query or modify the service on this system."                       >> /etc/ntp.conf 
					echo "restrict ${ntpserver} mask 255.255.255.255 nomodify notrap nopeer noquery"                                                                                >> /etc/ntp.conf 
					echo "# Permit all access over the loopback interface.  This could  # be tightened as well, but to do so would effect some of  # the administrative functions." >> /etc/ntp.conf 
					echo "restrict 127.0.0.1 nomodify "                                                                                                                             >> /etc/ntp.conf 
					echo "server ${ntpserver} burst iburst"                                                                                                                         >> /etc/ntp.conf 
					echo "logfile /var/log/ntp.log"                                                                                                                                 >> /etc/ntp.conf 
					systemctl start ntpd  		2>/dev/null
					systemctl enable ntpd 		2>/dev/null
					systemctl disable ntpdate 	2>/dev/null
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 3.13_Configure_Mail_Transfer_Agent_for_Local_Only_Mode ()
{
	#|# Description :  3.11_Remove_SNMP_Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="1" && ss -autn4 | grep "\:25"  | awk '{ print $5 }' | grep "127.0.0.1:25" > /dev/null 2>&1 && _result="0"
	ss -autn6 | grep "\:25" > /dev/null 2>&1 && _result="1"
		## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					File_Backup "/etc/postfix/main.cf"
					_OriginalLine="$(cat /etc/postfix/main.cf | grep "inet_interfaces" | egrep -v \# |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					_NewLine="inet_interfaces\ =\ localhost"
					sed -i "s/${_OriginalLine}/${_NewLine}/g" /etc/postfix/main.cf
					_OriginalLine="$(cat /etc/postfix/main.cf | grep "inet_protocols" | egrep -v \# |  sed -e "s/\ /\\\ /g" | sed -e "s/\//\\\\\//g" )"
					_NewLine="inet_protocols\ =\ ipv4"
					sed -i "s/${_OriginalLine}/${_NewLine}/g" /etc/postfix/main.cf
					service postfix restart  > /dev/null 2>&1 
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}


function 4.1.1_Disable_IP_Forwarding ()
{
	#|# Description :  4.1.1 Disable IP Forwarding
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv4.ip_forward)"
	if [ "${_State}" != "net.ipv4.ip_forward = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv4.conf.all.forwarding)"   
	if [ "${_State}" != "net.ipv4.conf.all.forwarding = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv4.conf.default.forwarding)"
	if [ "${_State}" != "net.ipv4.conf.default.forwarding = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.all.forwarding)"   
	if [ "${_State}" != "net.ipv6.conf.all.forwarding = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.default.forwarding)"
	if [ "${_State}" != "net.ipv6.conf.default.forwarding = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv4.conf.all.mc_forwarding)" 
	if [ "${_State}" != "net.ipv4.conf.default.mc_forwarding = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv4.conf.default.mc_forwarding)"
	if [ "${_State}" != "net.ipv4.ip_forward = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.all.mc_forwarding)" 
	if [ "${_State}" != "net.ipv6.conf.all.mc_forwarding = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.default.mc_forwarding)"
	if [ "${_State}" != "net.ipv6.conf.default.mc_forwarding = 0" ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv4.ip_forward = 0				 " >  /etc/sysctl.d/net-ipv4-ip_forward
					echo "net.ipv4.conf.all.forwarding = 0       " >> /etc/sysctl.d/net-ipv4-ip_forward
					echo "net.ipv4.conf.default.forwarding = 0   " >> /etc/sysctl.d/net-ipv4-ip_forward
					echo "net.ipv6.conf.all.forwarding = 0       " >> /etc/sysctl.d/net-ipv4-ip_forward
					echo "net.ipv6.conf.default.forwarding = 0   " >> /etc/sysctl.d/net-ipv4-ip_forward 
					echo "net.ipv4.conf.all.mc_forwarding = 0    " >  /etc/sysctl.d/net-ipv4-mc-ip_forward 
					echo "net.ipv4.conf.default.mc_forwarding = 0" >> /etc/sysctl.d/net-ipv4-mc-ip_forward 
					echo "net.ipv6.conf.all.mc_forwardin g= 0    " >> /etc/sysctl.d/net-ipv4-mc-ip_forward 
					echo "net.ipv6.conf.default.mc_forwarding=  0" >> /etc/sysctl.d/net-ipv4-mc-ip_forward 
					/sbin/sysctl -w net.ipv4.ip_forward=0 
					/sbin/sysctl -w net.ipv4.conf.all.forwarding=0   
					/sbin/sysctl -w net.ipv4.conf.default.forwarding=0
					/sbin/sysctl -w net.ipv6.conf.all.forwarding=0    
					/sbin/sysctl -w net.ipv6.conf.default.forwarding=0 
					/sbin/sysctl -w net.ipv4.conf.all.mc_forwarding=0  
					/sbin/sysctl -w net.ipv4.conf.default.mc_forwarding=0
					/sbin/sysctl -w net.ipv6.conf.all.mc_forwarding=0    
					/sbin/sysctl -w net.ipv6.conf.default.mc_forwarding=0 
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.1.2_Disable_Send_Packet_Redirects ()
{
	#|# Description :  4.1.2 Disable Send Packet Redirects
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv4.conf.all.send_redirects)"
	if [ "${_State}" != "net.ipv4.conf.all.send_redirects  = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv4.conf.default.send_redirects)"   
	if [ "${_State}" != "net.ipv4.conf.default.send_redirects = 0" ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv4.conf.all.send_redirects = 0			 " >  /etc/sysctl.d/net-ipv4-send_redirects
					echo "net.ipv4.conf.default.send_redirects = 0       " >> /etc/sysctl.d/net-ipv4-send_redirects
					/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0 
					/sbin/sysctl -w net.ipv4.conf.default.send_redirects=0   
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}


function 4.2.1_Disable_Source_Routed_Packet_Acceptance ()
{
	#|# Description :  4.2.1 Disable Source Routed Packet Acceptance
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv4.conf.all.accept_source_route)"
	if [ "${_State}" != "net.ipv4.conf.all.accept_source_route  = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv4.conf.default.accept_source_route)"   
	if [ "${_State}" != "net.ipv4.conf.default.accept_source_route = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.all.accept_source_route)"
	if [ "${_State}" != "net.ipv6.conf.all.accept_source_route  = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.default.accept_source_route)"   
	if [ "${_State}" != "net.ipv6.conf.default.accept_source_route = 0" ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv4.conf.all.accept_source_route = 0			  " >  /etc/sysctl.d/net-ipv4-accept_source_route
					echo "net.ipv4.conf.default.accept_source_route = 0       " >> /etc/sysctl.d/net-ipv4-accept_source_route
					echo "net.ipv6.conf.all.accept_source_route = 0			  " >  /etc/sysctl.d/net-ipv6-accept_source_route
					echo "net.ipv6.conf.default.accept_source_route = 0       " >> /etc/sysctl.d/net-ipv6-accept_source_route
					/sbin/sysctl -w net.ipv4.conf.all.accept_source_route=0 
					/sbin/sysctl -w net.ipv4.conf.default.accept_source_route=0   
					/sbin/sysctl -w net.ipv6.conf.all.accept_source_route=0 
					/sbin/sysctl -w net.ipv6.conf.default.accept_source_route=0   
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}


function 4.2.2_Disable_Router_Advertisements_and_Autoconfiguration ()
{
	#|# Description :  4.2.2 Change Number of Unicast IPV6 Addresses assigned
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv6.conf.all.accept_ra)"
	if [ "${_State}" != "net.ipv6.conf.all.accept_ra = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.all.accept_ra_rtr_pref)"   
	if [ "${_State}" != "net.ipv6.conf.all.accept_ra_rtr_pref = 0" ] 
		then 
			_result="1"
	fi 
		_State="$(/sbin/sysctl net.ipv6.conf.all.accept_ra_pinfo)"
	if [ "${_State}" != "net.ipv6.conf.all.accept_ra_pinfo = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.all.accept_ra_defrtr)"   
	if [ "${_State}" != "net.ipv6.conf.all.accept_ra_defrtr = 0" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.all.autoconf)"   
	if [ "${_State}" != "net.ipv6.conf.all.autoconf = 0" ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv6.conf.all.accept_ra = 0 		          " >> /etc/sysctl.d/net.ipv6.conf.all.accept_ra
					echo "net.ipv6.conf.all.accept_ra_rtr_pref = 0  	  " >> /etc/sysctl.d/net.ipv6.conf.all.accept_ra
					echo "net.ipv6.conf.all.accept_ra_pinfo = 0  		  " >> /etc/sysctl.d/net.ipv6.conf.all.accept_ra
					echo "net.ipv6.conf.all.accept_ra_defrtr = 0  	      " >> /etc/sysctl.d/net.ipv6.conf.all.accept_ra
					echo "net.ipv6.conf.all.autoconf = 0  		          " >> /etc/sysctl.d/net.ipv6.conf.all.accept_ra
					/sbin/sysctl -w net.ipv6.conf.all.accept_ra=0 
					/sbin/sysctl -w net.ipv6.conf.all.accept_ra_rtr_pref=0 
					/sbin/sysctl -w net.ipv6.conf.all.accept_ra_pinfo=0 
					/sbin/sysctl -w net.ipv6.conf.all.accept_ra_defrtr=0 
					/sbin/sysctl -w net.ipv6.conf.all.autoconf=0 

					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.3_Change_Number_of_Unicast_IPV6_Addresses_assigned ()
{
	#|# Description :  4.2.3 Change Number of Unicast IPV6 Addresses assigned
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv6.conf.all.max_addresses)"
	if [ "${_State}" != "net.ipv6.conf.all.max_addresses = 1" ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.default.max_addresses)"   
	if [ "${_State}" != "net.ipv6.conf.default.max_addresses = 1" ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv6.conf.all.max_addresses = 1   			  " >  /etc/sysctl.d/net.ipv6.conf.all.max_addresses
					echo "net.ipv6.conf.default.max_addresses = 1		      " >> /etc/sysctl.d/net.ipv6.conf.all.max_addresses
					/sbin/sysctl -w net.ipv6.conf.all.max_addresses=1   
					/sbin/sysctl -w net.ipv6.conf.default.max_addresses=1 
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.4_Change_Amount_of_Duplicate_Address_Detection ()
{
	#|# Description :  4.2.4 Change Amount of Duplicate Address Detection
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv6.conf.all.da_transmits)"
	if [ "${_State}" != "net.ipv6.conf.all.da_transmits = 0 " ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv6.conf.all.da_transmits = 0    			  " >  /etc/sysctl.d/net.ipv6.conf.all.da_transmits
					/sbin/sysctl -w net.ipv6.conf.all.da_transmits=0
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.5_Change_Number_of_Router_Solicitations
{
	#|# Description :  4.2.5 Change Number of Router Solicitations
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv6.conf.all.router_solicitations)"
	if [ "${_State}" != "net.ipv6.conf.all.router_solicitations = 0" ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv6.conf.all.router_solicitations = 0    			  " >  /etc/sysctl.d/net.ipv6.conf.all.da_transmits
					/sbin/sysctl -w net.ipv6.conf.all.router_solicitations=0
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.6_Disable_ICMP_Redirect_Acceptance
{
	#|# Description :  4.2.6 Disable ICMP Redirect Acceptance
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv6.conf.all.router_solicitations)"
	if [ "${_State}" != "net.ipv6.conf.all.router_solicitations = 0" ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv6.conf.all.router_solicitations = 0    			  " >  /etc/sysctl.d/net.ipv6.conf.all.da_transmits
					/sbin/sysctl -w net.ipv6.conf.all.router_solicitations=0
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.7_Disable_Secure_ICMP_Redirect_Acceptance ()
{
	#|# Description :  4.2.7 Disable Secure ICMP Redirect Acceptance
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv4.conf.all.secure_redirects)"
	if [ "${_State}" != "net.ipv4.conf.all.secure_redirects = 0 " ] 
		then 
			_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv4.conf.default.secure_redirects)"
	if [ "${_State}" != "net.ipv4.conf.default.secure_redirects = 0 " ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv4.conf.all.secure_redirects = 0    			  " >  /etc/sysctl.d/net.ipv4.conf.all.secure_redirects
					echo "net.ipv4.conf.default.secure_redirects = 0    			  " >>  /etc/sysctl.d/net.ipv4.conf.all.secure_redirects
					/sbin/sysctl -w net.ipv4.conf.all.secure_redirects=0
					/sbin/sysctl -w net.ipv4.conf.default.secure_redirects=0
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.8_Log_Suspicious_Packets
{
	#|# Description :  4.2.8Log Suspicious Packets
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
		_State="$(/sbin/sysctl net.ipv4.conf.all.log_martians)"
	if [ "${_State}" != "net.ipv4.conf.all.log_martians = 1" ] 
		then 
			_result="1"
	fi 
	State="$(/sbin/sysctl net.ipv4.conf.default.log_martians)"
	if [ "${_State}" != "net.ipv4.conf.default.log_martians = 1" ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv4.conf.all.log_martians = 1   			  " >  /etc/sysctl.d/net.ipv4.conf.default.log_martians
					echo "net.ipv4.conf.default.log_martians = 1    			  " >  /etc/sysctl.d/net.ipv4.conf.default.log_martians
					/sbin/sysctl -w net.ipv4.conf.all.log_martians=1
					/sbin/sysctl -w net.ipv4.conf.default.log_martians=1
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.9_Enable_Ignore_Broadcast_Requests
{
	#|# Description :  4.2.9 Enable Ignore Broadcast Requests
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
		_State="$(/sbin/sysctl net.ipv4.icmp_echo_ignore_broadcasts)"
	if [ "${_State}" != "net.ipv4.icmp_echo_ignore_broadcasts = 1 " ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv4.icmp_echo_ignore_broadcasts = 1    			  " >  /etc/sysctl.d/net.ipv4.icmp_echo_ignore_broadcasts
					/sbin/sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1 
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.10_Enable_Bad_Error_Message_Protection
{
	#|# Description :  4.2.10 Enable Bad Error Message Protection
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
		_State="$(/sbin/sysctl net.ipv4.icmp_ignore_bogus_error_responses)"
	if [ "${_State}" != "net.ipv4.icmp_ignore_bogus_error_responses = 1 " ] 
		then 
			_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv4.icmp_ignore_bogus_error_responses = 1    			  " >  /etc/sysctl.d/net.ipv4.icmp_ignore_bogus_error_responses
					/sbin/sysctl -w net.ipv4.icmp_ignore_bogus_error_responses=1 
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.11_Enable_RFC_recommended_Source_Route_Validation
{
	#|# Description :  4.2.11 Enable RFC-recommended Source Route Validation
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
		_State="$(/sbin/sysctl net.ipv4.conf.all.rp_filter)"
	if [ "${_State}" != "net.ipv4.conf.all.rp_filter = 1" ] 
		then 
	_result="1"
	fi 
		_State="$(/sbin/sysctl net.ipv4.conf.default.rp_filter)"
	if [ "${_State}" != "net.ipv4.conf.default.rp_filter = 1" ] 
		then 
	_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv4.conf.all.rp_filter = 1    			  " >  /etc/sysctl.d/net.ipv4.conf.all.rp_filter
					echo "net.ipv4.conf.default.rp_filter = 1    		  " >> /etc/sysctl.d/net.ipv4.conf.all.rp_filter
					/sbin/sysctl -w net.ipv4.conf.all.rp_filter=1 
					/sbin/sysctl -w net.ipv4.conf.default.rp_filter=1 
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.2.12_Enable_TCP_SYN_Cookies
{
	#|# Description :  4.2.12	Enable TCP SYN Cookies
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_result="0"
		_State="$(/sbin/sysctl net.ipv4.tcp_syncookies)"
	if [ "${_State}" != "net.ipv4.tcp_syncookies = 1" ] 
		then 
	_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv4.tcp_syncookies = 1     			  " >  /etc/sysctl.d/net.ipv4.tcp_syncookies
					/sbin/sysctl -w net.ipv4.tcp_syncookies=1  
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}


function 4.3_Disable_IPv6 
{
	#|# Description :  4.3 Disable IPv6 
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
			
	## TEST
	_result="0"
	_State="$(/sbin/sysctl net.ipv6.conf.all.disable_ipv6)"
	if [ "${_State}" != "net.ipv6.conf.all.disable_ipv6 = 1" ] 
		then 
	_result="1"
	fi 
	_State="$(/sbin/sysctl net.ipv6.conf.default.disable_ipv6)"
	if [ "${_State}" != "net.ipv6.conf.default.disable_ipv6 = 1" ] 
		then 
	_result="1"
	fi 
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "net.ipv6.conf.all.disable_ipv6 = 1      			  " >  /etc/sysctl.d/net.ipv6.conf.default.disable_ipv6
					echo "net.ipv6.conf.default.disable_ipv6 = 1    		  " >>  /etc/sysctl.d/net.ipv6.conf.default.disable_ipv6
					/sbin/sysctl -w	net.ipv6.conf.all.disable_ipv6=1 
					/sbin/sysctl -w	net.ipv6.conf.default.disable_ipv6=1
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.4_Enable_Firewalld ()
{
	#|# Description :  4.4_Enable_Firewalld
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_result="0" && systemctl list-units --type=service | grep firewalld | awk '{ print $2 "_" $3 "_" $4 }' | grep "loaded_active_running"  > /dev/null 2>&1   && _result="1"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					systemctl enable firewalld
					systemctl start firewalld 
					iptables --flush
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.5_Uncommon_Network_Protocols ()
{
	#|# Description :  4.4_Enable_Firewalld
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_result="1" && grep -r dccp /etc/modprobe.conf /etc/modprobe.d | egrep -v "blacklist" | egrep -v "/bin/true" > /dev/null 2>&1   && _result="0"
	 grep -r "sctp"  /etc/modprobe.conf /etc/modprobe.d/* | egrep -v "blacklist" | egrep -v "/bin/true"  > /dev/null 2>&1   && _result="0"
	 grep -r "rds"   /etc/modprobe.conf /etc/modprobe.d/* | egrep -v "blacklist" | egrep -v "/bin/true"   > /dev/null 2>&1   && _result="0"
	 grep -r "tipc"  /etc/modprobe.conf /etc/modprobe.d/* | egrep -v "blacklist" | egrep -v "/bin/true"   > /dev/null 2>&1   && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					grep -r "sctp"  /etc/modprobe.conf /etc/modprobe.d/* |
					File_Backup "/etc/modprobe.d/UNP.conf"
					echo "install dccp /bin/true" >> /etc/modprobe.d/UNP.conf
					echo "install sctp /bin/true" >> /etc/modprobe.d/UNP.conf
					echo "install rds /bin/true"  >> /etc/modprobe.d/UNP.conf
					echo "install tipc /bin/true" >> /etc/modprobe.d/UNP.conf
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 4.5_Uncommon_Network_Protocols ()
{
	#|# Description :  4.4_Enable_Firewalld
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_result="1" && grep -r dccp /etc/modprobe.conf /etc/modprobe.d | egrep -v "blacklist" | egrep -v "/bin/true" > /dev/null 2>&1   && _result="0"
	 grep -r "sctp"  /etc/modprobe.conf /etc/modprobe.d/* | egrep -v "blacklist" | egrep -v "/bin/true"  > /dev/null 2>&1   && _result="0"
	 grep -r "rds"   /etc/modprobe.conf /etc/modprobe.d | egrep -v "blacklist" | egrep -v "/bin/true"   > /dev/null 2>&1   && _result="0"
	 grep -r "tipc"  /etc/modprobe.conf /etc/modprobe.d | egrep -v "blacklist" | egrep -v "/bin/true"   > /dev/null 2>&1   && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					echo "install dccp /bin/true" > /etc/modprobe.d/UNP.conf
					echo "install sctp /bin/true" >> /etc/modprobe.d/UNP.conf
					echo "install rds  /bin/true" >> /etc/modprobe.d/UNP.conf
					echo "install tipc /bin/true" >> /etc/modprobe.d/UNP.conf
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 5.1.1_Install_the_rsyslog_package ()
{
	#|# Description :  5.1.1 Install the rsyslog package
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	 

	_result="1" && yum list installed rsyslog -q > /dev/null 2>&1 && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					yum_Install_Package "rsyslog"
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 5.1.2_Activate_the_rsyslog_service ()
{
	#|# Description :  5.1.1 Install the rsyslog package
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_result="1" && systemctl list-units --type=service | grep rsyslog | awk '{ print $2 "_" $3 "_" $4 }' | grep "loaded_active_running"  > /dev/null 2>&1   && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					systemctl enable rsyslog
					systemctl start rsyslog
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}


function 5.1.3_Configure_etc_rsyslog.conf ()
{
	#|# Description :  3.11_Remove_SNMP_Server
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	
	## TEST
	_Value="$(grep "/var/log/messages" /etc/rsyslog.conf  | egrep -v \# )"
	if [ "${_Value}" != "auth,user.* /var/log/messages" ] 
		then 
			_result="1"
	fi 
	
	_Value="$(grep "/var/log/kern.log" /etc/rsyslog.conf  | egrep -v \# )"
	if [ "${_Value}" != "kern.* /var/log/kern.log " ] 
		then 
			_result="1"
	fi 
	
	_Value="$(grep "/var/log/daemon.log" /etc/rsyslog.conf  | egrep -v \# )"
	if [ "${_Value}" != "daemon.* /var/log/daemon.log" ] 
		then 
			_result="1"
	fi
	
	_Value="$(grep "/var/log/syslog" /etc/rsyslog.conf  | egrep -v \# )"
	if [ "${_Value}" != "syslog.* /var/log/syslog" ] 
		then 
			_result="1"
	fi
	_Value="$(grep "/var/log/unused.log" /etc/rsyslog.conf  | egrep -v \# )"
	if [ "${_Value}" != "lpr,news,uucp,local0,local1,local2,local3,local4,local5,local6.* /var/log/unused.log" ] 
		then 
			_result="1"
	fi
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					File_Backup "/etc/rsyslog.conf"
					echo "# rsyslog configuration file																" >  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html						" >>  /etc/rsyslog
					echo "# If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html			" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "#### MODULES ####																			" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# The imjournal module bellow is now used as a message source instead of imuxsock.		" >>  /etc/rsyslog
					echo "$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)	" >>  /etc/rsyslog
					echo "$ModLoad imjournal # provides access to the systemd journal								" >>  /etc/rsyslog
					echo "#$ModLoad imklog # reads kernel messages (the same are read from journald)				" >>  /etc/rsyslog
					echo "#$ModLoad immark  # provides --MARK-- message capability									" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Provides UDP syslog reception															" >>  /etc/rsyslog
					echo "#$ModLoad imudp																			" >>  /etc/rsyslog
					echo "#$UDPServerRun 514																		" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Provides TCP syslog reception															" >>  /etc/rsyslog
					echo "#$ModLoad imtcp																			" >>  /etc/rsyslog
					echo "#$InputTCPServerRun 514																	" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "#### GLOBAL DIRECTIVES ####																" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Where to place auxiliary files															" >>  /etc/rsyslog
					echo "$WorkDirectory /var/lib/rsyslog															" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Use default timestamp format															" >>  /etc/rsyslog
					echo "$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat									" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# File syncing capability is disabled by default. This feature is usually not required,	" >>  /etc/rsyslog
					echo "# not useful and an extreme performance hit												" >>  /etc/rsyslog
					echo "#$ActionFileEnableSync on																	" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Include all config files in /etc/rsyslog.d/												" >>  /etc/rsyslog
					echo "$IncludeConfig /etc/rsyslog.d/*.conf														" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Turn off message reception via local log socket;										" >>  /etc/rsyslog
					echo "# local messages are retrieved through imjournal now.										" >>  /etc/rsyslog
					echo "$OmitLocalLogging on																		" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# File to store the position in the journal												" >>  /etc/rsyslog
					echo "$IMJournalStateFile imjournal.state														" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "#### RULES ####																			" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Log all kernel messages to the console.													" >>  /etc/rsyslog
					echo "# Logging much else clutters up the screen.												" >>  /etc/rsyslog
					echo "kern.*                                                 /var/log/kern.log 					" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Log anything (except mail) of level info or higher.										" >>  /etc/rsyslog
					echo "# Don't log private authentication messages!												" >>  /etc/rsyslog
					echo "auth,user.*								                /var/log/messages				" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "#register log for all daemons 															" >>  /etc/rsyslog
					echo "daemon.* 												/var/log/daemon.log 				" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "#regiter all syslog msgs 																	" >>  /etc/rsyslog
					echo "syslog.* 												/var/log/syslog 					" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# The authpriv file has restricted access.												" >>  /etc/rsyslog
					echo "authpriv.*                                              /var/log/secure					" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Log all the mail messages in one place.													" >>  /etc/rsyslog
					echo "mail.*                                                  -/var/log/maillog					" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Log cron stuff																			" >>  /etc/rsyslog
					echo "cron.*                                                  /var/log/cron						" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Everybody gets emergency messages														" >>  /etc/rsyslog
					echo "*.emerg                                                 :omusrmsg:*						" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Save news errors of level crit and higher in a special file.							" >>  /etc/rsyslog
					echo "uucp,news.crit                                          /var/log/spooler					" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# Save boot messages also to boot.log														" >>  /etc/rsyslog
					echo "local7.*                                                /var/log/boot.log					" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "#unused logs : 																			" >>  /etc/rsyslog
					echo "lpr,news,uucp,local0,local1,local2,local3,local4,local5,local6.* /var/log/unused.log 		" >>  /etc/rsyslog
					echo "																							" >>  /etc/rsyslog
					echo "# ### begin forwarding rule ###															" >>  /etc/rsyslog
					echo "# The statement between the begin ... end define a SINGLE forwarding						" >>  /etc/rsyslog
					echo "# rule. They belong together, do NOT split them. If you create multiple					" >>  /etc/rsyslog
					echo "# forwarding rules, duplicate the whole block!											" >>  /etc/rsyslog
					echo "# Remote Logging (we use TCP for reliable delivery)										" >>  /etc/rsyslog
					echo "#																							" >>  /etc/rsyslog
					echo "# An on-disk queue is created for this action. If the remote host is						" >>  /etc/rsyslog
					echo "# down, messages are spooled to disk and sent when it is up again.						" >>  /etc/rsyslog
					echo "#$ActionQueueFileName fwdRule1 # unique name prefix for spool files						" >>  /etc/rsyslog
					echo "#$ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)				" >>  /etc/rsyslog
					echo "#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown						" >>  /etc/rsyslog
					echo "#$ActionQueueType LinkedList   # run asynchronously										" >>  /etc/rsyslog
					echo "#$ActionResumeRetryCount -1    # infinite retries if host is down							" >>  /etc/rsyslog
					echo "# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional						" >>  /etc/rsyslog
					echo "#*.* @@remote-host:514																	" >>  /etc/rsyslog
					echo "# ### end of the forwarding rule ###														" >>  /etc/rsyslog
					service rsyslog restart  > /dev/null 2>&1 
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 5.2.1_Enable_auditd_Service ()
{
	#|# Description :  5.1.1 Install the rsyslog package
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_result="1" && systemctl list-units --type=service | grep auditd | awk '{ print $2 "_" $3 "_" $4 }' | grep "loaded_active_running"  > /dev/null 2>&1   && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					systemctl enable auditd
					systemctl start auditd
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}

function 5.2.2.1_Configure_Audit_Log_Storage_Size ()
{
	#|# Description :  5.2.2.1 Configure Audit Log Storage Size
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_result="1" && cat /etc/audit/auditd.conf  | grep "max_log_file = 30" | egrep -v \# > /dev/null 2>&1 && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					_OriginalLine="$(cat /etc/audit/auditd.conf  | grep "max_log_file =" | egrep -v \#  )"
					sed -i "s/${_OriginalLine}/max_log_file\ =\ 30/g" /etc/yum.conf
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}


function 5.2.2.1_Configure_Audit_Log_Storage_Size ()
{
	#|# Description :  5.2.2.1 Configure Audit Log Storage Size
	#|# Var to set  : 
	#|# 				_mode                       : use this var to set the action mode between report/apply
	#|# 				${1}                        : use this var to set Base_param_Dir_To_Create        
	#|# Base usage  :  Function_Name "apply or repport"
	#|# Send Back   :  Repport or repport and securing actions
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] " 
	
	_mode="${1}" 
	_callback="${FUNCNAME[0]}"
		
	_Dspl_ref="$( echo ${FUNCNAME[0]} | sed -e 's/_/\ /g')"
	_Num_Rule="$( echo ${_Dspl_ref} | awk '{ print $1 }' )"
	_Txt_Rule="$( echo ${_Dspl_ref} | sed 's/[0-9]*//g' )"
	## TEST
	_result="1" && grep "^space_left_action" /etc/audit/auditd.conf | egrep -v \# > /dev/null 2>&1 && _result="0"
	## end test
	if [ ${_result} = "1" ] 
		then 
			if [ "${_mode}" = "apply" ] 
				then 
					## APPLY
					_OriginalLine="$(cat /etc/audit/auditd.conf  | grep "max_log_file =" | egrep -v \#  )"
					sed -i "s/${_OriginalLine}/max_log_file\ =\ 30/g" /etc/yum.conf
					## END apply
					${_callback} "Report"
				else
					Report_result "${_Num_Rule}" "${_Txt_Rule}" "FAILLED"
			fi 
		else
			Report_result "${_Num_Rule}" "${_Txt_Rule}" "TEST PASSED"
	fi
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}


function SysctlSearch () 
{
	#|# Description :  this function will search in all sysctl file for spécific parameters 
	#|#
	#|# Var to set  : 
	#|#					_element     : defilte what element to search 
	#|#                 _element_val : define the needed value 
	#|#
	#|# Base usage  : SysctlSearch "${_element}" "_element_val" 
	#|#
	#|# Send Back   :  report Line
	############ STACK_TRACE_BUILDER #####################
	Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
	######################################################
	_element="${1}"
	_element_val="${2}"
	
	tot="for _files in  find /etc/"
	
	_state_ntp=$(systemctl | grep ntpd | awk '{ print $2 "_" $3 "_" $4  }') 
	if [ "${_state_ntp}" = "loaded_active_running" ]
		then 
			_result="0"
		else 
			_result="1"
	fi	
	
	
	############### Stack_TRACE_BUILDER ################
	Function_PATH="$( dirname ${Function_PATH} )"
	####################################################
}






Sourced_OK="1"
