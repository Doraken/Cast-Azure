###############################################################################
# file.lib                                              Version : 1.0         #
#                                                                             #
# Creation Date : 05/02/2019                                                  #
# Team          : Arnaud Crampet                                              #
# Support mail  : arnaud@crampet.net                                          #
# Author        : Arnaud Crampet                                              #
#                                                                             #
# Subject : This library provide base elements needed by C.A.S.T. scripts     #
#           this lib is based on C.A.S.T. framwork created by ARNAUD CRAMPET  #
###############################################################################
####
# INFO 
#      this lib is for all linux based systems ( may run on solaris and AIX but not supported in this version )



function File_Ctrl_Ext ()
{
#|# Description : This function is used to chek if a file had the goos extention.
#|#
#|# Var to set  :
#|# INTERNAL_File_To_TEST      : Use this var to set the fileto test                   ( Mandatory )
#|# INTERNAL_Ext_To_TEST       : Use this var to set the ext to test                   ( Mandatory )
#|# INTERNAL_CRITICITY_OF_FAIL : Use this var to set the level of the error            ( Mandatory )
#|# INTERNAL_ACTION_ON_FAIL    : Use this var to set the action to do if the test FAIL ( Optional )
#|# INTERNAL_ACTION_ON_SUCCESS : Use this var to set the action to do if the test FAIL ( Optional )
#|# ${1}                       : use this var to set [ INTERNAL_File_To_TEST ]
#|# ${2}                       : use this var to set [ INTERNAL_Ext_To_TEST ]
#|# ${3}                       : use this var to set [ INTERNAL_CRITICITY_OF_FAIL ]
#|# ${4}                       : use this var to set [ INTERNAL_ACTION_ON_FAIL ]
#|# ${5}                       : use this var to set [ INTERNAL_ACTION_ON_SUCCESS ]
#|#
#|# Base usage  : File_Ctrl_Ext "My_File" "My_ext" "INTERNAL_CRITICITY_OF_FAIL" "INTERNAL_ACTION_ON_FAIL" "INTERNAL_ACTION_ON_SUCCESS"
#|#
#|# Send Back   : None
############ STACK_TRACE_BUILDER #####################
Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

INTERNAL_File_To_TEST="${1}"
INTERNAL_Ext_To_TEST="${2}"
INTERNAL_CRITICITY_OF_FAIL="${3}"
INTERNAL_ACTION_ON_FAIL="${4}"
INTERNAL_ACTION_ON_SUCCESS="${5}"

INTERNAL_EXT_SIZE="$( echo ${INTERNAL_Ext_To_TEST} | awk -F\. '{ print NF }' )"
INTERNAL_FILE_EXT_SIZE="$( echo ${INTERNAL_File_To_TEST} | awk -F\. '{ print NF }'  )"
INTERNAL_FILE_EXT_SIZE="$( expr ${INTERNAL_FILE_EXT_SIZE} - 1 )"

RUN_IN="1"
FIELD_TO_GET="2"
FILE_FINAL_EXT=$(echo "${INTERNAL_File_To_TEST}" | awk -F\. -v VAR1=${FIELD_TO_GET} '{ print $VAR1 }' )
until [ "${RUN_IN}" = "${INTERNAL_FILE_EXT_SIZE}" ]
     do
       RUN_IN="$( expr ${RUN_IN} + 1 )"
       FIELD_TO_GET="$( expr ${FIELD_TO_GET} + 1 )"
       FILE_FINAL_EXT="${FILE_FINAL_EXT}.$(echo ${INTERNAL_File_To_TEST} | awk -F\. -v VAR1=${FIELD_TO_GET} '{ print $VAR1 }' )"
done

if ! [ "${FILE_FINAL_EXT}" = "${INTERNAL_Ext_To_TEST}" ]
   then
      MSG_DISPLAY "ErrorN" "Bad extention on file ${INTERNAL_File_To_TEST} : [ ${FILE_FINAL_EXT} ]" "${INTERNAL_CRITICITY_OF_FAIL}"
       if ! [ -z "${INTERNAL_ACTION_ON_FAIL}" ]
              then
                   ${INTERNAL_ACTION_ON_FAIL}
           fi
   else
       MSG_DISPLAY "Debug4" " File extention for ${INTERNAL_File_To_TEST} : [ OK ]"
       if ! [ -z "${INTERNAL_ACTION_ON_SUCCESS}" ]
              then
                   ${INTERNAL_ACTION_ON_SUCCESS}
           fi
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function File_Ctrl_Exist
{
#|# Description : This function is used to chek if a file exist or not and do specifics actions in both case
#|#
#|# Var to set  :
#|# Base_Param_File_To_TEST               : use this var to set which file to controle
#|# lib_File_Ctrl_Existe_create           : Use this var to set if you want to create the file if he wn't exist
#|# lib_File_Ctrl_Existe_critic_level     : Use this var to set the serverity exit level
#|# lib_File_Ctrl_Existe_onfail_action    : Use this var to set the action to do on failed condition
#|# lib_File_Ctrl_Existe_onsuccess_action : Use this var to set the action to do on passed condition
#|# ${1}                                  : Use this var to set [ Base_Param_File_To_TEST ]
#|# ${2}                                  : Use this var to set [ lib_File_Ctrl_Existe_create ]
#|# ${3}                                  : Use this var to set [ lib_File_Ctrl_Existe_critic_level ]
#|# ${4}                                  : Use this var to set [ lib_File_Ctrl_Existe_onfail_action ]
#|# ${5}                                  : Use this var to set [ lib_File_Ctrl_Existe_onsuccess_action ]
#|#
#|# Base usage  : File_Ctrl_Exist "file to control" "Dont_Create_File" "criticity_of_fail"  "Action on fail"  "Action on success"
############ STACK_TRACE_BUILDER #####################
Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

Base_Param_File_To_TEST="${1}"
lib_File_Ctrl_Existe_create="${2}"
lib_File_Ctrl_Existe_critic_level="${3}"
lib_File_Ctrl_Existe_onfail_action="${4}"
lib_File_Ctrl_Existe_onsuccess_action="${5}"

MSG_DISPLAY "Debug6" " File  Base_Param_File_To_TEST                : [ ${Base_Param_File_To_TEST} ] "
MSG_DISPLAY "Debug6" " File  lib_File_Ctrl_Existe_create            : [ ${lib_File_Ctrl_Existe_create} ] "
MSG_DISPLAY "Debug6" " File  lib_File_Ctrl_Existe_critic_level      : [ ${lib_File_Ctrl_Existe_critic_level} ] "
MSG_DISPLAY "Debug6" " File lib_File_Ctrl_Existe_onfail_action      : [ ${lib_File_Ctrl_Existe_onfail_action} ] "
MSG_DISPLAY "Debug6" " File  lib_File_Ctrl_Existe_onsuccess_action  : [ ${lib_File_Ctrl_Existe_onsuccess_action} ] "
MSG_DISPLAY "StMessage" "checking file ${Base_Param_File_To_TEST} :"
if [ "${Iterate_Function_File_Ctrl_Exist}" = "1" ]
   then
        if [ -e "${Base_Param_File_To_TEST}" ]
           then
                MSG_DISPLAY "EdSMessage" "CREATED"
                #MSG_DISPLAY "Debug6" " File ${Base_Param_File_To_TEST} : [ CREATED ] "
                if ! [ -z "${lib_File_Ctrl_Existe_onsuccess_action}" ]
                       then
                           ${lib_File_Ctrl_Existe_onsuccess_action}
                fi
           else
                MSG_DISPLAY "EdSMessage" "CAN T CREATE"
                MSG_DISPLAY "ErrorN" " File ${Base_Param_File_To_TEST} : [ CAN T CREATE ]" "${lib_File_Ctrl_Existe_critic_level}"
                if ! [  -z "${lib_File_Ctrl_Existe_onfail_action}" ]
                       then
                            ${lib_File_Ctrl_Existe_onfail_action}
                fi
        fi
   else
        if [ -e "${Base_Param_File_To_TEST}" ]
           then
                MSG_DISPLAY "EdSMessage" "FOUND"
                #MSG_DISPLAY "Debug6" " File ${Base_Param_File_To_TEST} : [ PRESENT ] "
                if ! [ -z "${lib_File_Ctrl_Existe_onsuccess_action}" ]
                        then
                             ${lib_File_Ctrl_Existe_onsuccess_action}
                fi
           else
               case ${lib_File_Ctrl_Existe_create} in
                    Create_file) touch ${Base_Param_File_To_TEST}
                                 Iterate_Function_File_Ctrl_Exist="1"
                                 File_Ctrl_Exist
                                 ;;
                Dont_Create_File)# MSG_DISPLAY "EdEMessage" "Not FOUND"
                        MSG_DISPLAY "ErrorN" "File ${Base_Param_File_To_TEST} : [ NOT FOUND ]" "${lib_File_Ctrl_Existe_critic_level}" "2"
                                 ;;
                              *) MSG_DISPLAY "ErrorN" "Not supported case" "2"
                                 ;;
               esac
               MSG_DISPLAY "EdEMessage" "NOT FOUND"
               MSG_DISPLAY "ErrorN" "File ${Base_Param_File_To_TEST} : [ Not PRESENT ]" "${lib_File_Ctrl_Existe_critic_level}" "2"
                    if ! [ -z "${lib_File_Ctrl_Existe_onfail_action}" ]
                       then
                            ${lib_File_Ctrl_Existe_onfail_action}
                    fi
         fi
fi
Iterate_Function_File_Ctrl_Exist="0"
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function File_Get_FileName
{
#|# Description : This function provide capacity to find filename at the end of the path.
#|#
#|# Var to set    : 
#|# STRING_PATH_FILEMANE                        : use this var to set Path and file to refine
#|#
#|# ${1}                                    : use this var to set STRING_PATH_FILEMANE
#|#
#|# Base usage  : File_Get_FileName "My_PATH/my_file vars"
#|#
#|# Send Back   : Filename as string
#|# 
############ STACK_TRACE_BUILDER #####################
Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

STRING_PATH_FILEMANE="${1}"


if [ -z "${STRING_PATH_FILEMANE}" ]
   then
       MSG_DISPLAY "ErrorN" "EMPTT var for \$\1 in File_Get_FileName CALL  : [ KO ] " "1"
   else
       FILE_NAME_var="$( echo ${STRING_PATH_FILEMANE} | awk -F\/ '{ print $NF }')"
       if [ "${FILE_NAME_var}" = "/" ]
          then
              MSG_DISPLAY "ErrorN" "Error no Filename i \$\1 File_Get_FileName Call  : [ KO ] " "1"
          else
              MSG_DISPLAY "Debug6" "Return of File_Get_FileName is  : [ ${FILE_NAME_var} ] "
              Return_var_File_Get_FileName="${FILE_NAME_var}"
       fi
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function File_Backup
{
#|# Description : This function is used to genrerate a dated backup of a file directly into backup directory.
#|#
#|# Var to set    : 
#|# Base_File_To_bck                        : use this var to set which file to backup
#|#
#|# ${1}                                    : use this var to set Base_File_To_bck
#|#
#|# Base usage  : File_move_or_copy "file to MVCP" "destination full path " "action type" "destination is a dir 0/1"
#|#
#|# Send Back   : File_Backup "file_to_backup"
#|# 
############ STACK_TRACE_BUILDER #####################
Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
USE_DATE="$(date +%Y_%m_%d-%HH_%MM)"
Base_File_To_bck="${1}"
File_Get_FileName "${Base_File_To_bck}"
File_BkcSubDir=$( dirname ${Base_File_To_bck} )
Directory_CRT "${Base_Dir_Scripts_BCK}${File_BkcSubDir}"
Internal_BCK_file="${Base_Dir_Scripts_BCK}${File_BkcSubDir}/${Return_var_File_Get_FileName}_${USE_DATE}"

File_move_or_copy "${Base_File_To_bck}" "${Internal_BCK_file}" "copy" "0"


############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function File_move_or_copy
{
#|# Description : This function is to manage file copy or move with error control.
#|#
#|# Var to set    : 
#|# Base_File_To_move_or_copy                       : use this var to set which file to copy or move
#|# Base_Destination                                : Use this var to set the destination of the files / dirs
#|# Action_type_cpmv                                : use this var to set if you copy or move the file / dirs
#|# Is_To_Dir                                       : Use this var if the destination is a directory
#|#
#|# ${1}                                    : use this var to set Base_File_To_move_or_copy
#|# ${2}                                    : Use this var to set Base_File_Dest
#|# ${3}                                    : use this var to set Action_type_cpmv ( copy = cp | move  = mv )
#|# ${4}                                    : Use this var to set Is_To_Dir
#|#
#|# Base usage  : File_move_or_copy "file to MVCP" "destination full path " "action type" "destination is a dir 0/1"
#|#
#|# Send Back   : File compy action or move 
############ STACK_TRACE_BUILDER #####################
Function_PATH="${Function_PATH}/${FUNCNAME[0]}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

Base_File_To_move_or_copy="${1}"
Base_Destination="${2}"
Action_type_cpmv="${3}"
Is_To_Dir="${4}"

MSG_DISPLAY "Debug6" "Value for Base_File_To_move_or_copy : [ ${Base_File_To_move_or_copy} ]"
MSG_DISPLAY "Debug6" "Value for Base_Destination          : [ ${Base_Destination} ]"
MSG_DISPLAY "Debug6" "Value for Action_type_cpmv          : [ ${Action_type_cpmv} ]"
MSG_DISPLAY "Debug6" "Value for Is_To_Dir                 : [ ${Is_To_Dir} ]"

if [ "${Is_To_Dir}" = "1" ]
   then
       Directory_CRT="${Base_File_Dest}"
       Internal_CPMV_dest="${Base_Destination}/"
   else
       Internal_CPMV_dest="${Base_Destination}"
       #File_Ctrl_Exist "${Internal_CPMV_dest}" "Dont_Create_File" "0"
fi

File_Get_FileName "${Base_File_To_move_or_copy}"

MSG_DISPLAY "Debug6"  "Internal_CPMV_dest is set to : [ ${Internal_CPMV_dest} ]"
case ${Action_type_cpmv} in
     copy|COPY) ACTION_CPVM="cp"
                MSG_DISPLAY "Debug6" " Choosen action : [ ${Action_type_cpmv} ]"
                if [ -d ${Base_File_To_move_or_copy} ]
                   then
                      Base_Action_Params=" -Rp"
                   else
                      Base_Action_Params=""
                fi
                ;;

     move|MOVE) ACTION_CPVM="mv"
                MSG_DISPLAY "Debug6" " Choosen action : [ ${Action_type_cpmv} ]"
                Base_Action_Params=""
                ;;

            * ) MSG_DISPLAY "ErrorN" " Not supported OPTION : [ ${Action_type_cpmv} ]" "2"
                ;;
esac


File_Ctrl_Exist "${Base_File_To_move_or_copy}" "Dont_Create_File" "2"
MSG_DISPLAY "Debug9" "CMD : [ ${ACTION_CPVM} ${Base_Action_Params} ${Base_File_To_move_or_copy}  ${Internal_CPMV_dest} ]"
MSG_DISPLAY "Debug9" "Bakuping file ${Base_File_To_move_or_copy} to ${Internal_CPMV_dest} ]"
${ACTION_CPVM} ${Base_Action_Params} ${Base_File_To_move_or_copy}  ${Internal_CPMV_dest}
File_Ctrl_Exist "${Internal_CPMV_dest}" "Dont_Create_File" "2"


############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



Sourced_OK="1"